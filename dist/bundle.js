(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>p});var r=t(537),a=t.n(r),o=t(645),i=t.n(o),s=t(667),c=t.n(s),d=new URL(t(268),t.b),l=i()(a());l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap);"]);var A=c()(d);l.push([e.id,`* {\n  padding: 0;\n  margin: 0;\n  font-family: "Montserrat", sans-serif;\n  font-weight: 500;\n}\n\n*:focus-visible {\n  outline: none;\n}\n\nbody {\n  background-attachment: fixed;\n  background-size: cover;\n  background-image: url(${A});\n  color: white;\n}\n\n.header {\n  display: flex;\n}\n\n.header .search-bar-container {\n  display: flex;\n  flex-direction: column;\n  margin-left: auto;\n  max-width: 250px;\n  position: relative;\n}\n\n.no-location-found-error {\n  color: rgb(255, 102, 102);\n  top: 4rem;\n  position: absolute;\n  margin: 0 1rem;\n}\n\n.header .search-bar {\n  padding: 4px;\n  color: white;\n  appearance: none;\n  border: none;\n  border-radius: 4px;\n  background-color: rgba(255, 255, 255, 0.158);\n  height: 2rem;\n  margin: 1rem;\n  font-weight: 500;\n  font-size: 1rem;\n}\n\n#detailed-weather-display {\n  display: flex;\n  align-items: center;\n  border-radius: 0.75rem;\n  padding: 2rem 8rem 4rem 8rem;\n}\n\n#detailed-weather-display .detailed-weather-temp {\n  display: flex;\n  position: relative;\n  font-size: 6rem;\n  font-weight: 700;\n  margin-right: 1rem;\n}\n.detailed-weather-temp.celsius::after {\n  padding: 0 0.25rem;\n  font-size: 2rem;\n  content: "째C";\n}\n\n#detailed-weather-display .wrapper {\n  display: flex;\n  flex-direction: column;\n  font-weight: 700;\n}\n\n.hourly-weather-display-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 2fr));\n  gap: 2rem;\n  padding: 0 8rem;\n}\n\n.hourly-weather-display {\n  min-width: 80px;\n  display: flex;\n  flex-direction: column;\n  border: 2px solid rgba(255, 255, 255, 0.295);\n  border-radius: 0.75rem;\n  padding: 0.5rem;\n  align-items: center;\n}\n\n.hourly-weather-display:hover {\n  cursor: pointer;\n  background-color: rgba(255, 255, 255, 0.158);\n}\n.hourly-weather-display-temp.celsius::after,\n.feels-like-temp.celsius::after {\n  content: "째C";\n}\n\n.hourly-weather-display img {\n  height: 2rem;\n  width: 2rem;\n}\n\n.hide {\n  display: none;\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.fade-out {\n  animation: fadeOut 1s ease-in-out forwards;\n}`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,UAAU;EACV,SAAS;EACT,qCAAqC;EACrC,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,4BAA4B;EAC5B,sBAAsB;EACtB,yDAAuC;EACvC,YAAY;AACd;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,SAAS;EACT,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,gBAAgB;EAChB,YAAY;EACZ,kBAAkB;EAClB,4CAA4C;EAC5C,YAAY;EACZ,YAAY;EACZ,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,eAAe;EACf,gBAAgB;EAChB,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,eAAe;EACf,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,2DAA2D;EAC3D,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,4CAA4C;EAC5C,sBAAsB;EACtB,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,4CAA4C;AAC9C;AACA;;EAEE,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,aAAa;AACf;;AAEA;EACE;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;AACF;;AAEA;EACE,0CAA0C;AAC5C",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");\n\n* {\n  padding: 0;\n  margin: 0;\n  font-family: "Montserrat", sans-serif;\n  font-weight: 500;\n}\n\n*:focus-visible {\n  outline: none;\n}\n\nbody {\n  background-attachment: fixed;\n  background-size: cover;\n  background-image: url(./imgs/night.jpg);\n  color: white;\n}\n\n.header {\n  display: flex;\n}\n\n.header .search-bar-container {\n  display: flex;\n  flex-direction: column;\n  margin-left: auto;\n  max-width: 250px;\n  position: relative;\n}\n\n.no-location-found-error {\n  color: rgb(255, 102, 102);\n  top: 4rem;\n  position: absolute;\n  margin: 0 1rem;\n}\n\n.header .search-bar {\n  padding: 4px;\n  color: white;\n  appearance: none;\n  border: none;\n  border-radius: 4px;\n  background-color: rgba(255, 255, 255, 0.158);\n  height: 2rem;\n  margin: 1rem;\n  font-weight: 500;\n  font-size: 1rem;\n}\n\n#detailed-weather-display {\n  display: flex;\n  align-items: center;\n  border-radius: 0.75rem;\n  padding: 2rem 8rem 4rem 8rem;\n}\n\n#detailed-weather-display .detailed-weather-temp {\n  display: flex;\n  position: relative;\n  font-size: 6rem;\n  font-weight: 700;\n  margin-right: 1rem;\n}\n.detailed-weather-temp.celsius::after {\n  padding: 0 0.25rem;\n  font-size: 2rem;\n  content: "째C";\n}\n\n#detailed-weather-display .wrapper {\n  display: flex;\n  flex-direction: column;\n  font-weight: 700;\n}\n\n.hourly-weather-display-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 2fr));\n  gap: 2rem;\n  padding: 0 8rem;\n}\n\n.hourly-weather-display {\n  min-width: 80px;\n  display: flex;\n  flex-direction: column;\n  border: 2px solid rgba(255, 255, 255, 0.295);\n  border-radius: 0.75rem;\n  padding: 0.5rem;\n  align-items: center;\n}\n\n.hourly-weather-display:hover {\n  cursor: pointer;\n  background-color: rgba(255, 255, 255, 0.158);\n}\n.hourly-weather-display-temp.celsius::after,\n.feels-like-temp.celsius::after {\n  content: "째C";\n}\n\n.hourly-weather-display img {\n  height: 2rem;\n  width: 2rem;\n}\n\n.hide {\n  display: none;\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.fade-out {\n  animation: fadeOut 1s ease-in-out forwards;\n}'],sourceRoot:""}]);const p=l},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),n.push(l))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],d=r.base?c[0]+r.base:c[0],l=o[d]||0,A="".concat(d," ").concat(l);o[d]=l+1;var p=t(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var f=a(u,r);r.byIndex=s,n.splice(s,0,{identifier:A,updater:f,references:1})}i.push(A)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=t(o[i]);n[s].references--}for(var c=r(e,a),d=0;d<o.length;d++){var l=t(o[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},268:(e,n,t)=>{e.exports=t.p+"98a55a7ddf04bf9e039c.jpg"}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!e;)e=r[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0;var r={};(()=>{t.d(r,{j:()=>E});var e=t(379),n=t.n(e),a=t(795),o=t.n(a),i=t(569),s=t.n(i),c=t(565),d=t.n(c),l=t(216),A=t.n(l),p=t(589),u=t.n(p),f=t(426),m={};function h(e,...n){const t=document.createElement("div");return e&&(t.id=e),n.forEach((e=>{t.classList.add(e)})),t}function C(e,n,...t){const r=document.createElement("span");return r.textContent=e,n&&(r.id=n),t.forEach((e=>{r.classList.add(e)})),r}function g(e){document.querySelector("#detailed-weather-display")&&document.querySelector("#detailed-weather-display").remove();const n=document.getElementById("main"),t=h("detailed-weather-display");n.insertAdjacentElement("beforebegin",t),t.appendChild(C(e.tempC,"","detailed-weather-temp","celsius"));const r=h("","wrapper");t.appendChild(r),r.appendChild(C(`Feels like: ${e.feelTempC}`,"","feels-like-temp","celsius")),r.appendChild(C(`Chance of rain: ${e.chanceOfRain}%`,"chance-of-rain")),r.appendChild(C(`Wind speed: ${e.windSpeedKPH}`,"wind-speed")),r.appendChild(C(`Condition: ${e.condition.text}`,"condition"))}async function E(e){const n=await async function(e){try{const n=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=68e2440c2c1f4c7aa91163912232208&q=${e}&days=3`,{mode:"cors"});return await n.json()}catch(e){console.log("Error fetching weather data",e)}}(e);if(n.error)return 1006===n.error.code&&function(){const e=C("No location found, please provide a city or region name","","no-location-found-error");document.querySelector(".search-bar-container").insertAdjacentElement("beforeend",e),setTimeout((()=>{e.classList.add("fade-out")}),2e3),e.addEventListener("animationend",(()=>{e.remove()}))}(),void console.log(`Error fetching your data: ${n.error.message}`);let t={};const r=(a=new Date,a.setHours(a.getHours()+Math.round(a.getMinutes()/60)),a.setMinutes(0,0,0),a).getHours();var a;n.forecast.forecastday.forEach(((e,n)=>{t[`day${n}`]=e}));const o=function(e){let n=[];return e.hour.forEach(((e,t)=>{const r={time:e.time,condition:e.condition,tempC:e.temp_c,tempF:e.temp_f,feelTempC:e.feelslike_c,feelTempF:e.feelslike_f,chanceOfRain:e.chance_of_rain,windSpeedKPH:e.wind_kph,windSpeedMPH:e.wind_mph};n.push(r)})),n}(t.day0);g(o[r]),function(e){document.querySelector(".hourly-weather-display-container")&&document.querySelector(".hourly-weather-display-container").remove();const n=document.getElementById("main"),t=h("","hourly-weather-display-container");e.forEach((e=>{t.appendChild(function(e){const n=h("","hourly-weather-display");n.appendChild(C(e.tempC,"","hourly-weather-display-temp","celsius")),n.appendChild(function(e,n,...t){const r=document.createElement("img");return r.src=e,n&&(r.id=n),t.forEach((e=>{r.classList.add(e)})),r}(e.condition.icon,"","weather-icon"));const t=e.time.split(" ")[1];return n.appendChild(C(t)),n.addEventListener("click",(()=>{g(e)})),n}(e))})),n.appendChild(t)}(o)}m.styleTagTransform=u(),m.setAttributes=d(),m.insert=s().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=A(),n()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals,function(){const e=h("header","header");document.body.appendChild(e);const n=h("","search-bar-container"),t=document.createElement("input");t.type="text",t.classList.add("search-bar"),t.placeholder="Search city...",t.addEventListener("keypress",(e=>{"Enter"===e.key&&e.target.value&&(E(e.target.value),e.target.value="")})),n.appendChild(t),e.appendChild(n);const r=h("main","main");document.body.appendChild(r)}(),E("auto:ip")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,